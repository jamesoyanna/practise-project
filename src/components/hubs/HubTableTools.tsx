import { Button } from '@/components/ui/Button'
import { FaPlus, FaArrowLeft } from 'react-icons/fa'
import HubTableSearch from './HubTableSearch'
import { useState } from 'react'
import { Avatar, Dialog,  } from '../ui'
// eslint-disable-next-line import/named
import RegisterHub, { HubFormPageTwo, LocalGovernment } from './RegisterHub'
import { BsCheckLg } from 'react-icons/bs'
import { useAppDispatch, postHubs } from '../../store/slices/hubs'
import { hubType } from '@/store/slices/hubs/details'
import  { formattedDateAndTime } from '@/utils/formatDate'




const HubTableTools = () => {
    const dispatch = useAppDispatch()
    const [isOpen, setIsOpen] = useState(false)
    const [currentPage, setCurrentPage] = useState(1)
    const [hubFormData, setHubFormData] = useState<hubType>({
        id: '',
        hubImg: '',
        // hubPhoneNumber: 0,
        hubId: '',
        hubName: '',
        hubState: 0,
        hubLocation: '',
        dateRegistered: '',
        // status: 0,
        servicingLocalGovernment: [],
        nextOfKin: {
            nextOfKinFirstName: '',
            nextOfKinLastName: '',
            nextOfKinPhoneNumber: '',
            nextOfKinAddress: '',
            nextOfKinRelationship: '',
        },
        hubManagerFirstName: '',
        hubManagerLastName: '',
        hubManagerEmail: '',
        hubManagerPhoneNo: '',
        hubManagerId: '',
        hubManagerAdress: '',
    })
    const [confirmationMessage, setConfirmationMessage] = useState(false)
    const [error, setError] = useState<string>('')

    const goToNextPage = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {
        event.preventDefault(); // Prevent default behavior of the event
    
        if (
            hubFormData.hubName !== '' &&
            hubFormData.hubState !== 0 &&
            hubFormData.hubLocation !== '' &&
            hubFormData.servicingLocalGovernment.length !== null
        ) {
            setCurrentPage(currentPage + 1)
            setError('')
        } else {
            setError('All fields are required')
        }
    }
    
    

    const goToPreviousPage = () => {
        setCurrentPage(currentPage - 1)
    }

    const handleLocalGovernmentsChange = (selectedLGs: LocalGovernment[]) => {
        setHubFormData({
            ...hubFormData,
            servicingLocalGovernment: selectedLGs,
        })
    }

    const handleSubmit = (e: React.MouseEvent<HTMLButtonElement>) => {
        e.preventDefault()
        const index = 0
        if (
            hubFormData.hubName !== '' &&
            hubFormData.hubState !== 0 &&
            hubFormData.hubLocation !== '' &&
            hubFormData.servicingLocalGovernment.length > 1 &&
            hubFormData.hubManagerFirstName !== '' &&
            hubFormData.hubManagerLastName !== '' &&
            hubFormData.hubManagerEmail !== '' &&
            hubFormData.hubManagerAdress !== '' &&
            hubFormData.hubManagerPhoneNo !== '' &&
            hubFormData.nextOfKin.nextOfKinFirstName !== '' &&
            hubFormData.nextOfKin.nextOfKinLastName !== '' &&
            hubFormData.nextOfKin.nextOfKinRelationship !== '' &&
            hubFormData.nextOfKin.nextOfKinPhoneNumber !== ''
        ) {
            // here i autogenerated the
            const generateId = (index: number) =>
                (index + 1).toString().padStart(3, '0')
            const generateSuperscript = (prefix: string, index: number) =>
                `${prefix}${generateId(index)}`
            const hubName = hubFormData.hubName
            const hubImg = `https://example.com/${hubName}.png` // Example image URL
            const currentDate = new Date ()

            const generatedFormData = {
                ...hubFormData,
                id: generateId(index),
                hubId: generateSuperscript('HID', index),
                hubImg: hubImg,
                dateRegistered: formattedDateAndTime(currentDate),
                hubManagerId: generateSuperscript('HIM', index),
            }

            try {
                dispatch(postHubs([generatedFormData]))
                setIsOpen(false)
                setHubFormData({
                    id: '',
                    hubImg: '',
                    // hubPhoneNumber: 0,
                    hubId: '',
                    hubName: '',
                    hubState:0,
                    hubLocation: '',
                    dateRegistered: '',
                    // status: 0,
                    servicingLocalGovernment: [],
                    nextOfKin: {
                        nextOfKinFirstName: '',
                        nextOfKinLastName: '',
                        nextOfKinPhoneNumber: '',
                        nextOfKinAddress: '',
                        nextOfKinRelationship: '',
                    },
                    hubManagerFirstName: '',
                    hubManagerLastName: '',
                    hubManagerEmail: '',
                    hubManagerPhoneNo: '',
                    hubManagerId: '',
                    hubManagerAdress: '',
                })
                setConfirmationMessage(true)
                setError('')
            } catch (error) {
                console.error('Error dispatching postHubs:', error)
                setError('Error submitting form')
            }
        } else {
            setError('All input fields are required.')
        }
    }

    return (
        <>
            <div className="lg:flex lg:items-center lg:justify-between mb-6"></div>
            <div className="flex flex-col md:flex-row md:items-center md:justify-between mb-6">
                <div className="md:w-3/4">
                    <HubTableSearch />
                </div>
                <div className="flex justify-end md:mt-0 ml-4 md:ml-0">
                    <Button
                        block
                        variant="solid"
                        size="md"
                        icon={<FaPlus />}
                        onClick={() => setIsOpen(true)}
                    >
                        Register Hub
                    </Button>
                </div>
                <div className="">
                    <Dialog
                        preventScroll={false}
                        className="justify-center overflow-hidden"
                        contentClassName="custom-content-class"
                        height={500}
                        width={450}
                        isOpen={isOpen}
                        onClose={() => setIsOpen(false)}
                    >
                        <div className="flex items-center gap-5 my-[-.5rem]">
                            {currentPage !== 1 && (
                                <button
                                    className="bg-[#194DA3] rounded-full p-2 text-[#fff]"
                                    onClick={goToPreviousPage}
                                >
                                    <FaArrowLeft className="h-4 w-4 mr-1" />
                                </button>
                            )}
                            <span className="text-[#194DA3] bg-[#d8e4f7] text-[12px] p-2 rounded-2xl font-semibold">
                                Register Hub
                            </span>
                            <span className="text-[#000] bg-[#f9f9f9] text-[12px] p-2 rounded-2xl font-semibold">
                                {currentPage === 1 ? '1 of 2' : '2 of 2'}
                            </span>
                        </div>

                        <div className="no-scrollbar h-full overflow-y-auto py-[2rem]">
                            <form>
                                {currentPage === 1 ? (
                                    <RegisterHub
                                        hubName={hubFormData.hubName}
                                        hubAddress={hubFormData.hubLocation}
                                        hubState={hubFormData.hubState}
                                        selectedLocalGovernments={
                                            hubFormData.servicingLocalGovernment
                                        }
                                        error={error}
                                        onNext={goToNextPage}
                                        onHubNameChange={(e) =>
                                            setHubFormData({
                                                ...hubFormData,
                                                hubName: e,
                                            })
                                        }
                                        onHubAddressChange={(e) =>
                                            setHubFormData({
                                                ...hubFormData,
                                                hubLocation: e,
                                            })
                                        }
                                        onLocalGovernmentsChange={
                                            handleLocalGovernmentsChange
                                        }

                                        onHubStateChange={(e)=>{setHubFormData({
                                            ...hubFormData, hubState: e,
                                        })}}
                                    />
                                ) : (
                                    <div className="no-scrollbar h-full overflow-y-auto pb-[2rem]">
                                        <HubFormPageTwo
                                            hubFormData={hubFormData}
                                            setHubFormData={setHubFormData}
                                        />
                                        <p className="text-[#ff0000] font-semibold text-sm">
                                            {error}
                                        </p>
                                        <div className="w-full flex mt-auto align-bottom ">
                                            <Button
                                                variant="solid"
                                                className="w-[100%]  align-baseline"
                                                onClick={handleSubmit}
                                            >
                                                Register Hub and Manager
                                            </Button>
                                        </div>
                                    </div>
                                )}
                            </form>
                            {error}
                        </div>
                    </Dialog>
                    {confirmationMessage && (
                        <>
                        
                            <div className="border bg-[#fff] absolute  top-[10%]  right-[40%] pt-8 pb-2 px-2 w-[280px]">
                                <div className="flex flex-col gap-3">
                                    <div className="flex items-center justify-center">
                                        <Avatar
                                            icon={<BsCheckLg />}
                                            shape="circle"
                                            className="bg-[#194DA3] text-center"
                                        />
                                    </div>

                                    <p className=" text-xs text-center">
                                        Wow! You’ve successfully registered a
                                        new Hub and Manager.
                                    </p>

                                    <Button
                                        variant="solid"
                                        className="bg-[#FFC124] hover:bg-[#FFC124] w-full"
                                        size="sm"
                                        onClick={() =>
                                            setConfirmationMessage(false)
                                        }
                                    >
                                        Okay
                                    </Button>
                                </div>
                            </div>
                        </>
                    )}
                </div>
            </div>
        </>
    )
}

export default HubTableTools
